#include "scene_3d_demo.h"
#include "../scene/scene.h"
#include <iostream>

Scene3DDemo::Scene3DDemo(SDLWrapper* platform) 
    : m_scene(nullptr), m_camera(nullptr), m_depthBuffer(nullptr), m_rasterizer(nullptr),
      m_platform(platform), m_cube(nullptr), m_triangle(nullptr), m_redMaterial(nullptr),
      m_blueMaterial(nullptr), m_pointLight(nullptr), m_dirLight(nullptr),
      m_wireframeMode(false), m_rotateObjects(true), m_currentObject(0), m_rotationSpeed(1.0f) {
}

Scene3DDemo::~Scene3DDemo() {
    cleanup();
}

bool Scene3DDemo::initialize() {
    std::cout << "üîß ÂàùÂßãÂåñ3DÂú∫ÊôØÊºîÁ§∫..." << std::endl;
    
    try {
        // ÂàõÂª∫Ê∑±Â∫¶ÁºìÂÜ≤
        m_depthBuffer = new DepthBuffer(m_platform->getWidth(), m_platform->getHeight());
        std::cout << "‚úì Ê∑±Â∫¶ÁºìÂÜ≤ÂàõÂª∫ÊàêÂäü" << std::endl;
        
        // ÂàõÂª∫3DÂÖâÊ†ÖÂåñÂô®
        m_rasterizer = new Rasterizer3D(m_platform, m_depthBuffer);
        std::cout << "‚úì 3DÂÖâÊ†ÖÂåñÂô®ÂàõÂª∫ÊàêÂäü" << std::endl;
        
        // ÂàõÂª∫Âú∫ÊôØÂØπË±°
        createSceneObjects();
        std::cout << "‚úì Âú∫ÊôØÂØπË±°ÂàõÂª∫ÊàêÂäü" << std::endl;
        
        // ÂàõÂª∫ÊùêË¥®
        createMaterials();
        std::cout << "‚úì ÊùêË¥®ÂàõÂª∫ÊàêÂäü" << std::endl;
        
        // ÂàõÂª∫ÂÖâÊ∫ê
        createLights();
        std::cout << "‚úì ÂÖâÊ∫êÂàõÂª∫ÊàêÂäü" << std::endl;
        
        // ËÆæÁΩÆÁõ∏Êú∫
        setupCamera();
        std::cout << "‚úì Áõ∏Êú∫ËÆæÁΩÆÊàêÂäü" << std::endl;
        
        // ÂàõÂª∫Âú∫ÊôØ
        m_scene = new Scene3D();
        m_scene->setCamera(m_camera);
        m_scene->addObject(m_cube, Matrix4::identity());
        m_scene->addLight(m_pointLight);
        std::cout << "‚úì Âú∫ÊôØÂàõÂª∫ÊàêÂäü" << std::endl;
        
        std::cout << "‚úÖ 3DÂú∫ÊôØÊºîÁ§∫ÂàùÂßãÂåñÂÆåÊàê" << std::endl;
        return true;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå 3DÂú∫ÊôØÊºîÁ§∫ÂàùÂßãÂåñÂ§±Ë¥•: " << e.what() << std::endl;
        return false;
    }
}

void Scene3DDemo::update(float deltaTime) {
    if (m_rotateObjects) {
        updateTransforms(deltaTime);
    }
}

void Scene3DDemo::render(float time) {
    if (!m_scene || !m_camera || !m_rasterizer || !m_depthBuffer) {
        std::cerr << "‚ö†Ô∏è  3DÂú∫ÊôØÊºîÁ§∫Êú™ÂÆåÂÖ®ÂàùÂßãÂåñ" << std::endl;
        return;
    }
    
    // Ê∏≤ÊüìÂú∫ÊôØ
    if (m_platform->beginRenderSession()) {
        // Ê∏ÖÁ©∫Â±èÂπï
        m_platform->clearScreen(0, 0, 0, 255);
        
        // Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
        static int debugFrame = 0;
        if (debugFrame % 60 == 0) {
            std::cout << "üîç Ë∞ÉËØï‰ø°ÊÅØ:" << std::endl;
            std::cout << "   Áõ∏Êú∫‰ΩçÁΩÆ: " << m_camera->getPosition().x << ", " 
                      << m_camera->getPosition().y << ", " << m_camera->getPosition().z << std::endl;
            std::cout << "   Âú∫ÊôØÂØπË±°Êï∞: " << m_scene->getObjects().size() << std::endl;
            std::cout << "   ÂÖâÊ∫êÊï∞: " << m_scene->getLights().size() << std::endl;
        }
        debugFrame++;
        
        // Ê∏≤Êüì3DÂú∫ÊôØ
        m_scene->render(m_camera, m_pointLight, m_rasterizer, m_depthBuffer);
        
        m_platform->endRenderSession();
    }
    
    // ÊòæÁ§∫Ê∏≤ÊüìÁªüËÆ°
    static int frameCount = 0;
    if (frameCount % 60 == 0) {
        std::cout << "üìä Ê∏≤ÊüìÁªüËÆ° - ÊÄª‰∏âËßíÂΩ¢: " << m_scene->getTotalTriangles() 
                  << ", Ê∏≤Êüì: " << m_scene->getRenderedTriangles() 
                  << ", ÂâîÈô§: " << m_scene->getCulledTriangles() << std::endl;
    }
    frameCount++;
}

void Scene3DDemo::handleKeyInput(int key) {
    switch (key) {
        case 'W':
            toggleWireframe();
            break;
        case 'R':
            toggleRotation();
            break;
        case 'O':
            switchObject();
            break;
        case 'C':
            resetCamera();
            break;
    }
}

void Scene3DDemo::toggleWireframe() {
    m_wireframeMode = !m_wireframeMode;
    if (m_rasterizer) {
        m_rasterizer->setWireframeMode(m_wireframeMode);
    }
    std::cout << "üé® Á∫øÊ°ÜÊ®°Âºè: " << (m_wireframeMode ? "ÂºÄÂêØ" : "ÂÖ≥Èó≠") << std::endl;
}

void Scene3DDemo::toggleRotation() {
    m_rotateObjects = !m_rotateObjects;
    std::cout << "üîÑ ÂØπË±°ÊóãËΩ¨: " << (m_rotateObjects ? "ÂºÄÂêØ" : "ÂÖ≥Èó≠") << std::endl;
}

void Scene3DDemo::switchObject() {
    m_currentObject = (m_currentObject + 1) % 2;
    std::cout << "üéØ ÂàáÊç¢ÂØπË±°: " << (m_currentObject == 0 ? "Á´ãÊñπ‰Ωì" : "‰∏âËßíÂΩ¢") << std::endl;
}

void Scene3DDemo::resetCamera() {
    if (m_camera) {
        m_camera->setPosition(Vector3(0.0f, 0.0f, -8.0f));
        m_camera->lookAt(Vector3(0.0f, 0.0f, -8.0f), Vector3(0.0f, 0.0f, 0.0f), Vector3(0.0f, 1.0f, 0.0f));
    }
    std::cout << "üì∑ Áõ∏Êú∫‰ΩçÁΩÆÂ∑≤ÈáçÁΩÆ" << std::endl;
}

void Scene3DDemo::createSceneObjects() {
    // ÂàõÂª∫Á´ãÊñπ‰Ωì
    m_cube = Mesh::createCube(2.0f);
    
    // ÂàõÂª∫‰∏âËßíÂΩ¢
    m_triangle = Mesh::createTriangle(2.0f);
}

void Scene3DDemo::createMaterials() {
    // ÂàõÂª∫Á∫¢Ëâ≤ÊùêË¥®
    m_redMaterial = new Material();
    m_redMaterial->setAmbient(Color(0.2f, 0.0f, 0.0f, 1.0f));
    m_redMaterial->setDiffuse(Color(1.0f, 0.0f, 0.0f, 1.0f));
    m_redMaterial->setSpecular(Color(1.0f, 1.0f, 1.0f, 1.0f));
    m_redMaterial->setShininess(32.0f);
    
    // ÂàõÂª∫ËìùËâ≤ÊùêË¥®
    m_blueMaterial = new Material();
    m_blueMaterial->setAmbient(Color(0.0f, 0.0f, 0.2f, 1.0f));
    m_blueMaterial->setDiffuse(Color(0.0f, 0.0f, 1.0f, 1.0f));
    m_blueMaterial->setSpecular(Color(1.0f, 1.0f, 1.0f, 1.0f));
    m_blueMaterial->setShininess(32.0f);
    
    // ËÆæÁΩÆÊùêË¥®
    if (m_cube) m_cube->setMaterial(m_redMaterial);
    if (m_triangle) m_triangle->setMaterial(m_blueMaterial);
}

void Scene3DDemo::createLights() {
    // ÂàõÂª∫ÁÇπÂÖâÊ∫ê
    m_pointLight = new PointLight(Vector3(3.0f, 3.0f, 3.0f), Color(1.0f, 1.0f, 1.0f, 1.0f), 1.0f);
    
    // ÂàõÂª∫ÊñπÂêëÂÖâÊ∫ê
    m_dirLight = new DirectionalLight(Vector3(0.0f, -1.0f, 0.0f), Color(0.5f, 0.5f, 0.5f, 1.0f), 0.5f);
}

void Scene3DDemo::setupCamera() {
    m_camera = new Camera();
    // Ë∞ÉÊï¥Áõ∏Êú∫‰ΩçÁΩÆÔºåËÆ©Áâ©‰ΩìÊõ¥ÂÆπÊòìÁúãÂà∞
    m_camera->setPosition(Vector3(0.0f, 0.0f, -8.0f));  // ‰ªé-5Êîπ‰∏∫-8ÔºåÁ¶ªÁâ©‰ΩìÊõ¥Ëøú
    m_camera->setPerspective(Constants::PI / 4.0f, 800.0f / 600.0f, 0.1f, 100.0f);
    m_camera->lookAt(Vector3(0.0f, 0.0f, -8.0f), Vector3(0.0f, 0.0f, 0.0f), Vector3(0.0f, 1.0f, 0.0f));
}

void Scene3DDemo::updateTransforms(float time) {
    if (!m_scene) return;
    
    // Êõ¥Êñ∞Á´ãÊñπ‰ΩìÊóãËΩ¨
    Matrix4 rotationMatrix = Matrix4::rotationY(time * m_rotationSpeed) * Matrix4::rotationX(time * m_rotationSpeed * 0.7f);
    m_scene->getObject(0).transform = rotationMatrix;
}

void Scene3DDemo::renderScene() {
    if (!m_scene || !m_camera || !m_rasterizer || !m_depthBuffer) return;
    
    // Ê∏≤Êüì3DÂú∫ÊôØ
    m_scene->render(m_camera, m_pointLight, m_rasterizer, m_depthBuffer);
}

void Scene3DDemo::cleanup() {
    std::cout << "üßπ Ê∏ÖÁêÜ3DÂú∫ÊôØÊºîÁ§∫ËµÑÊ∫ê..." << std::endl;
    
    delete m_scene;
    delete m_camera;
    delete m_depthBuffer;
    delete m_rasterizer;
    delete m_cube;
    delete m_triangle;
    delete m_redMaterial;
    delete m_blueMaterial;
    delete m_pointLight;
    delete m_dirLight;
    
    m_scene = nullptr;
    m_camera = nullptr;
    m_depthBuffer = nullptr;
    m_rasterizer = nullptr;
    m_cube = nullptr;
    m_triangle = nullptr;
    m_redMaterial = nullptr;
    m_blueMaterial = nullptr;
    m_pointLight = nullptr;
    m_dirLight = nullptr;
    
    std::cout << "‚úÖ 3DÂú∫ÊôØÊºîÁ§∫ËµÑÊ∫êÊ∏ÖÁêÜÂÆåÊàê" << std::endl;
}
